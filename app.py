import streamlit as st
import pandas as pd
import json
from PyPDF2 import PdfReader
from langchain.docstore.document import Document
from agente import gerar_resposta, base_vetorial

# ===============================
# Inicializar sess√£o
# ===============================
if "chat_historico" not in st.session_state:
    st.session_state["chat_historico"] = []

if "pergunta_exemplo" not in st.session_state:
    st.session_state["pergunta_exemplo"] = None

# ===============================
# Fun√ß√µes auxiliares
# ===============================
def carregar_texto_pdf(uploaded_pdf):
    reader = PdfReader(uploaded_pdf)
    texto = ""
    for page in reader.pages:
        texto += page.extract_text() or ""
    return texto

def carregar_texto_csv(uploaded_csv):
    df = pd.read_csv(uploaded_csv)
    return df.to_string()

def carregar_texto_excel(uploaded_excel):
    df = pd.read_excel(uploaded_excel)
    return df.to_string()

def exportar_historico_txt(historico):
    return "\n".join(f"{role.upper()}: {msg}" for role, msg in historico)

def exportar_historico_json(historico):
    return json.dumps(historico, indent=2, ensure_ascii=False)

def exibir_conversa():
    for role, msg in st.session_state["chat_historico"]:
        with st.chat_message(role):
            st.markdown(msg)

# ===============================
# Sidebar ‚Äì Upload, Exemplos e Exporta√ß√£o
# ===============================
st.sidebar.title("ü©∫ Dr. Chic√≥ ‚Äì Assistente M√©dico")

st.sidebar.markdown("""
Converse com o **Dr. Chic√≥**, assistente de IA especializado em anestesiologia.

üí¨ Temas sugeridos:
- T√©cnicas anest√©sicas
- Rea√ß√µes fisiol√≥gicas
- Riscos e complica√ß√µes
- Casos cl√≠nicos
""")

# Categorias de perguntas
with st.sidebar.expander("üí° Conceitos B√°sicos", expanded=False):
    st.markdown("Exemplos sobre conceitos fundamentais de anestesia.")
    if st.button("O que √© anestesia geral?"):
        st.session_state["pergunta_exemplo"] = "O que √© anestesia geral e como ela funciona?"
    if st.button("Tipos de anestesia"):
        st.session_state["pergunta_exemplo"] = "Qual a diferen√ßa entre anestesia geral, regional e local?"

with st.sidebar.expander("‚ö†Ô∏è Complica√ß√µes", expanded=False):
    st.markdown("Quest√µes sobre riscos e efeitos adversos.")
    if st.button("Complica√ß√µes comuns"):
        st.session_state["pergunta_exemplo"] = "Quais s√£o as complica√ß√µes mais comuns na anestesia?"

with st.sidebar.expander("üìé Fontes e Estudo", expanded=False):
    st.markdown("Entenda de onde vem o conhecimento do assistente.")
    if st.button("Fontes de dados"):
        st.session_state["pergunta_exemplo"] = "Quais as fontes de dados que utiliza para responder?"

# Upload de arquivo
st.sidebar.markdown("### üìé Adicionar Documento")
TIPOS_SUPORTADOS = {
    "application/pdf": carregar_texto_pdf,
    "text/csv": carregar_texto_csv,
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": carregar_texto_excel,
    "application/vnd.ms-excel": carregar_texto_excel,
}
uploaded_file = st.sidebar.file_uploader("Envie um arquivo (PDF, CSV, Excel)", type=["pdf", "csv", "xlsx"])
if uploaded_file:
    try:
        if uploaded_file.type in TIPOS_SUPORTADOS:
            texto = TIPOS_SUPORTADOS[uploaded_file.type](uploaded_file)
            if texto.strip():
                base_vetorial.add_documents([Document(page_content=texto)])
                st.sidebar.success("‚úÖ Documento adicionado √† base de conhecimento.")
            else:
                st.sidebar.warning("‚ö†Ô∏è O arquivo n√£o cont√©m texto reconhec√≠vel.")
        else:
            st.sidebar.error("‚ùå Formato de arquivo n√£o suportado.")
    except Exception as e:
        st.sidebar.error(f"Erro ao processar o arquivo: {e}")

# Exporta√ß√£o do hist√≥rico
with st.sidebar.expander("üì§ Exportar Hist√≥rico"):
    if st.button("‚¨áÔ∏è Exportar como .txt"):
        txt = exportar_historico_txt(st.session_state["chat_historico"])
        st.download_button("Baixar .txt", txt, file_name="chat_irineu.txt")
    if st.button("‚¨áÔ∏è Exportar como .json"):
        js = exportar_historico_json(st.session_state["chat_historico"])
        st.download_button("Baixar .json", js, file_name="chat_irineu.json")

# ===============================
# T√≠tulo principal
# ===============================
st.title("üë®‚Äç‚öïÔ∏è Dr. Chic√≥ - O Assistente M√©dico Inteligente")
st.markdown("Converse com o assistente de IA sobre **temas m√©dicos confi√°veis**, com base em documentos t√©cnicos.")

# ===============================
# Bot√£o de nova conversa
# ===============================
if st.button("üîÑ Nova Conversa"):
    st.session_state["chat_historico"] = []
    st.session_state["pergunta_exemplo"] = None
    st.success("‚úÖ Nova conversa iniciada.")

# ===============================
# Entrada do usu√°rio
# ===============================
entrada_usuario = st.chat_input("Digite sua pergunta m√©dica aqui...")
pergunta = entrada_usuario or st.session_state["pergunta_exemplo"]

# ===============================
# Processa nova pergunta
# ===============================
if pergunta and (
    len(st.session_state["chat_historico"]) == 0 or
    st.session_state["chat_historico"][-1] != ("user", pergunta)
):
    st.session_state["chat_historico"].append(("user", pergunta))
    historico_formatado = [
        f"{'Usu√°rio' if role == 'user' else 'Assistente'}: {msg}"
        for role, msg in st.session_state["chat_historico"]
    ]
    try:
        resposta = gerar_resposta(pergunta, historico_formatado)
        st.session_state["chat_historico"].append(("assistant", resposta))
    except Exception as e:
        st.session_state["chat_historico"].append(("assistant", f"Erro ao gerar resposta: {e}"))
    st.session_state["pergunta_exemplo"] = None

# ===============================
# Renderiza o hist√≥rico do chat
# ===============================
exibir_conversa()
